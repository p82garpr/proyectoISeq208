        -:    0:Source:C:/Users/Isaac/Desktop/GINF/2º/IS/p1/cute/cute_runner.h
        -:    0:Graph:C:/Users/Isaac/Desktop/GINF/2º/IS/p1/Debug Gcov/src/Test.gcno
        -:    0:Data:C:/Users/Isaac/Desktop/GINF/2º/IS/p1/Debug Gcov/src/Test.gcda
        -:    0:Runs:1
        -:    1:/*********************************************************************************
        -:    2: * This file is part of CUTE.
        -:    3: *
        -:    4: * Copyright (c) 2006-2018 Peter Sommerlad, IFS
        -:    5: *
        -:    6: * Permission is hereby granted, free of charge, to any person obtaining a copy
        -:    7: * of this software and associated documentation files (the "Software"), to deal
        -:    8: * in the Software without restriction, including without limitation the rights
        -:    9: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   10: * copies of the Software, and to permit persons to whom the Software is
        -:   11: * furnished to do so, subject to the following conditions:
        -:   12: *
        -:   13: * The above copyright notice and this permission notice shall be included in all
        -:   14: * copies or substantial portions of the Software.
        -:   15: *
        -:   16: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   17: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   18: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   19: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   20: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   21: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        -:   22: * SOFTWARE.
        -:   23: *
        -:   24: *********************************************************************************/
        -:   25:
        -:   26:#ifndef CUTE_RUNNER_H_
        -:   27:#define CUTE_RUNNER_H_
        -:   28:
        -:   29:#include "cute_test.h"
        -:   30:#include "cute_suite.h"
        -:   31:#include "cute_listener.h"
        -:   32:#include "cute_determine_traits.h"
        -:   33:
        -:   34:#include <algorithm>
        -:   35:#include <functional>
        -:   36:#include <iterator>
        -:   37:#include <set>
        -:   38:
        -:   39:namespace cute {
        -:   40:	namespace runner_aux {
        -:   41:	struct prefixMatcher
        -:   42:	{
function _ZN4cute10runner_aux13prefixMatcherC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   43:		prefixMatcher(std::string const &prefix):prefix(prefix){}
call    0 never executed
function _ZNK4cute10runner_aux13prefixMatcherclERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   44:		bool operator()(std::string const &s) const {
    #####:   45:			size_t found=s.find(prefix);
call    0 never executed
    #####:   46:			return found==0 && (s.size()==prefix.size() || s[prefix.size()]=='#');
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:   47:		}
        -:   48:	private:
        -:   49:		std::string const prefix;
        -:   50:	};
        -:   51:	struct prefixCutter
        -:   52:	{
function _ZN4cute10runner_aux12prefixCutterC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   53:		prefixCutter(std::string const &prefix):prefix(prefix){}
call    0 never executed
function _ZNK4cute10runner_aux12prefixCutterclENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   54:		std::string operator()(std::string s) const {
    #####:   55:			size_t found=s.find(prefix);
call    0 never executed
    #####:   56:			if ( found==0 && s.size()>prefix.size() && s[prefix.size()]=='#'){
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   57:				s = s.substr(prefix.size()+1);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   58:			} else {
    #####:   59:				s.clear(); // either no match, or no individual test
call    0 never executed
        -:   60:			}
    #####:   61:			return s;
call    0 never executed
        -:   62:		}
        -:   63:	private:
        -:   64:		std::string const prefix;
        -:   65:	};
        -:   66:	class ArgvTestFilter
        -:   67:	{
        -:   68:	    std::set<std::string> match;
function _ZN4cute10runner_aux14ArgvTestFilter14shouldRunSuiteERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS7_SaIS7_EE called 1 returned 100% blocks executed 18%
        1:   69:	    bool shouldRunSuite(std::string const &info, std::vector<std::string> const &args)
        -:   70:	    {
       1*:   71:	        if(!args.size() || !info.size())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        1:   72:	            return true;
    #####:   73:	        if(args.end() != find_if(args.begin(), args.end(), prefixMatcher(info))){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:   74:	           std::transform(args.begin(), args.end(), std::inserter(match,match.begin()),prefixCutter(info));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:   75:	           match.erase(std::string()); // get rid of empty string
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   76:	           return true;
        -:   77:	        }
    #####:   78:	        return false;
        -:   79:	    }
        -:   80:	public:
        -:   81:	    bool const shouldrunsuite;
function _ZN4cute10runner_aux14ArgvTestFilterC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS7_SaIS7_EE called 1 returned 100% blocks executed 80%
        1:   82:		ArgvTestFilter(std::string const &info, std::vector<std::string> const &args)
        1:   83:		:shouldrunsuite(shouldRunSuite(info,args)){}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
function _ZNK4cute10runner_aux14ArgvTestFilter9shouldRunERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 62%
       12:   84:	    bool shouldRun(const std::string & name) const
        -:   85:	    {
      12*:   86:	        return match.empty() || match.count(name);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   87:	    }
        -:   88:	};
        -:   89:	} // namespace runner_aux
        -:   90:	template <typename Listener=null_listener>
        -:   91:	struct runner{
        -:   92:		Listener &listener;
        -:   93:	    std::vector<std::string> args;
function _ZN4cute6runnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEEC1ERS5_iPKPKc called 1 returned 100% blocks executed 62%
        1:   94:		runner(Listener &l, int argc = 0, const char *const *argv = 0):listener(l){
call    0 returned 100%
call    1 never executed
        1:   95:	        if(needsFiltering(argc,argv)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   96:	            std::remove_copy_if(argv + 1, argv + argc,back_inserter(args),std::logical_not<char const *>());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   97:	        }
        1:   98:		}
        -:   99:		bool operator()(const test & t) const
        -:  100:	    {
        -:  101:	        return runit(t);
        -:  102:	    }
        -:  103:
function _ZNK4cute6runnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEEclERKSt6vectorINS_4testESaIS8_EEPKc called 1 returned 100% blocks executed 66%
        1:  104:	    bool operator ()(suite const &s, const char *info = "") const
        -:  105:	    {
        2:  106:	    	runner_aux::ArgvTestFilter filter(info,args);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -:  107:
        1:  108:	        bool result = true;
        1:  109:	        if(filter.shouldrunsuite){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  110:	            listener.begin(s, info, (size_t)
        1:  111:	            		count_if(s.begin(),s.end(),boost_or_tr1::bind(&runner_aux::ArgvTestFilter::shouldRun,filter,boost_or_tr1::bind(&test::name,_1))));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
call   15 never executed
        7:  112:	            for(suite::const_iterator it = s.begin();it != s.end();++it){
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 86% (fallthrough)
branch  4 taken 14%
call    5 returned 100%
        6:  113:	                if (filter.shouldRun(it->name())) result = this->runit(*it) && result;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
branch 14 taken 33% (fallthrough)
branch 15 taken 67%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 never executed
        -:  114:	            }
        1:  115:	            listener.end(s, info);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  116:	        }
        -:  117:
        2:  118:	        return result;
call    0 returned 100%
        -:  119:	    }
        -:  120:	private:
function _ZNK4cute6runnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEE14needsFilteringEiPKPKc called 1 returned 100% blocks executed 67%
        1:  121:	    bool needsFiltering(int argc, const char *const *argv) const
        -:  122:	    {
       1*:  123:	        return argc > 1 && argv ;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  124:	    }
        -:  125:
        -:  126:
function _ZNK4cute6runnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEE5runitERKNS_4testE called 6 returned 100% blocks executed 28%
        6:  127:	    bool runit(const test & t) const
        -:  128:	    {
        -:  129:	        try {
        6:  130:	            listener.start(t);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  131:	            t();
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67% (throw)
        2:  132:	            listener.success(t, "OK");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  133:	            return true;
        8:  134:	        } catch(const cute::test_failure & e){
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        4:  135:	            listener.failure(t, e);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    =====:  136:	        } catch(const std::exception & exc){
call    0 never executed
call    1 never executed
    =====:  137:	            listener.error(t, demangle(exc.what()).c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    =====:  138:	        } catch(std::string & s){
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  139:	            listener.error(t, s.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    =====:  140:	        } catch(const char *&cs) {
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  141:				listener.error(t,cs);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  142:			} catch(...) {
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  143:				listener.error(t,"unknown exception thrown");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  144:			}
        4:  145:			return false;
        -:  146:		}
        -:  147:	};
        -:  148:	template <typename Listener>
function _ZN4cute10makeRunnerINS_12xml_listenerINS_12ide_listenerINS_13null_listenerEEEEEEENS_6runnerIT_EERS7_iPKPKc called 1 returned 100% blocks executed 100%
        1:  149:	runner<Listener> makeRunner(Listener &s, int argc = 0, const char *const *argv = 0){
        1:  150:		return runner<Listener>(s,argc,argv);
call    0 returned 100%
        -:  151:	}
        -:  152:}
        -:  153:
        -:  154:#endif /*CUTE_RUNNER_H_*/
