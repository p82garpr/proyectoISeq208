        -:    0:Source:C:/Users/Isaac/Desktop/GINF/2º/IS/p1/cute/cute_xml_file.h
        -:    0:Graph:C:/Users/Isaac/Desktop/GINF/2º/IS/p1/Debug Gcov/src/Test.gcno
        -:    0:Data:C:/Users/Isaac/Desktop/GINF/2º/IS/p1/Debug Gcov/src/Test.gcda
        -:    0:Runs:1
        -:    1:/*********************************************************************************
        -:    2: * This file is part of CUTE.
        -:    3: *
        -:    4: * Copyright (c) 2013-2018 Peter Sommerlad, IFS
        -:    5: *
        -:    6: * Permission is hereby granted, free of charge, to any person obtaining a copy
        -:    7: * of this software and associated documentation files (the "Software"), to deal
        -:    8: * in the Software without restriction, including without limitation the rights
        -:    9: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:   10: * copies of the Software, and to permit persons to whom the Software is
        -:   11: * furnished to do so, subject to the following conditions:
        -:   12: *
        -:   13: * The above copyright notice and this permission notice shall be included in all
        -:   14: * copies or substantial portions of the Software.
        -:   15: *
        -:   16: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        -:   17: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        -:   18: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        -:   19: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        -:   20: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        -:   21: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        -:   22: * SOFTWARE.
        -:   23: *
        -:   24: *********************************************************************************/
        -:   25:
        -:   26:#ifndef CUTE_XML_FILE_H_
        -:   27:#define CUTE_XML_FILE_H_
        -:   28:
        -:   29:#include <fstream>
        -:   30:#include <string>
        -:   31:
        -:   32:namespace cute {
        -:   33:struct xml_file_opener {
        -:   34:	std::string filename;
        -:   35:	std::ofstream out;
function _ZN4cute15xml_file_openerC1EiPKPKc called 1 returned 100% blocks executed 48%
        1:   36:	xml_file_opener(int argc, char const *const* argv)
        1:   37:	:filename(argc>0&&argv[0]?basename(argv[0]):"testresult.xml")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       3*:   38:	,out(filename.c_str()){}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0% (throw)
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
function _ZN4cute15xml_file_opener8basenameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:   39:	std::string basename(std::string path){
        -:   40:#if defined( _MSC_VER ) || defined(__MINGW32__)
        1:   41:		char const sep='\\';
        -:   42:#else
        -:   43:		char const sep='/';
        -:   44:#endif
        1:   45:		std::string::size_type pos=path.find_last_of(sep,path.size()-1);
call    0 returned 100%
call    1 returned 100%
        1:   46:		if (pos != std::string::npos) path.erase(0,pos+1);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:   47:		path+=".xml";
call    0 returned 100%
        1:   48:		return path;
call    0 returned 100%
        -:   49:	}
        -:   50:};
        -:   51:}
        -:   52:
        -:   53:#endif /* CUTE_XML_FILE_H_ */
